# make an SD suitable for the GTA04 (Letux 2804)
# run on some host with a SD interface

#
# export DEV=... if needed to set the device
# export SERVER=... if you want to install a specific version

[ "$SERVER" ] || export SERVER=http://download.goldelico.com/gta04/unstable

# set defaults

DEBUG=false

FORMAT1=none
BOOT1=none
KERNEL1=none
DT1=
ROOTFS1=none
CONFIG1=none

FORMAT2=none
BOOT2=none
KERNEL2=none
DT2=
ROOTFS2=none
CONFIG2=none

FORMAT3=none
BOOT3=none
KERNEL3=none
DT3=
ROOTFS3=none
CONFIG3=none

FORMAT4=none
BOOT4=none
KERNEL4=none
DT4=
ROOTFS4=none
CONFIG4=none

NP=0

function useage()
{
	echo "useage: DEV=/dev/device makesd [partition1 [partition2 [partition3 [partition4]]]]"
	echo
	echo "  DEV=/dev/device - specify the raw device (not the partitions), e.g. /dev/sdc"
	echo "  partition:"
	echo "    format (starts next partition):"
	echo "    -f fat"
	echo "    -f ext3"
	echo "    -f ext4"
	echo "    -f none"
	echo "    -f[1-4] -- switch to given partition"
	echo "    bootloader:"
	echo "    -b <url>"
	echo "    -b none"
	echo "    -b gta04"
	echo "    -b gta04b2"
	echo "    -b gta04b3"
	echo "    -b gta04b7"
	echo "    -b pandaboard"
	echo "    -b omap5evm"
	echo "    kernel:"
	echo "    -k <url>"
	echo "    -k none"
	echo "    -k 3.17-rc7"
	echo "    modules (must come after kernel):"
	echo "    -m none"
	echo "    -m 3.17-rc7"
	echo "    device tree files (mst come after kernel):"
	echo "    -d omap3-gta04a2"
	echo "    -d <pattern>"
	echo "    -d '*'"
	echo "    root file system (OS):"
	echo "    -r <url>"
	echo "    -r none"
	echo "    -r debian-lxde"
	echo "    -r debian-minimal"
	echo "    -r quantumstep"
	echo "    -r replicant-4.2"
	echo "    -r qtmoko"
	echo "    config patches:"
	echo "    -c <url>"
	echo "    -c none"
	echo "    -c debian-wheezy"
	echo "    abbreviations for single partition cards:"
	echo "      debian-lxde = -f ext4 -r debian-lxde -d all -k latest -m latest -c debian-wheezy"
	echo "      qtmoko = -f ext4 -r qtmoko -d all -k latest (does not need config)"
	echo "      replicant = -f ext4 -d all -r replicant-4.2 (has its own kernel)"
	echo "      quantumstep = -f ext4 -r quantumstep -d all -k latest -m latest -c debian-wheezy"
	echo "    abbreviations for multiple partitions (to create bootable production image flash card):"
	echo "      l2804 = -f fat -b gta04 debian-lxde"
	echo "      l3704 = -f fat -b gta04b2 debian-lxde"
	echo "      l7004 = -f fat -b gta04b3 debian-lxde"
	echo "      neo900 = -f fat -b gta04b7 debian-lxde"
	echo "      pandaboard = -f fat -b pandaboard debian-lxde"
	echo "      pyra = -f fat -b pyra debian-lxde"
	echo "      all = debian-lxde qtmoko replicant quantumstep"
}


function process() { # $1 .. $n
	while [ "$1" ]
		do
		case "$1" in
			-f[1-4] ) # switch to given partition
				NP=$(expr "$1" : "-f\(.*\)" )
				$DEBUG && echo "switched to partition $NP"
				shift
				$DEBUG && echo "partition $NP type: $1"
				;;
			-f ) # switch to next partition
				NP=$(expr "$NP" + 1)
				if [ "$NP" -gt 4 ]
				then
					echo "too many partitions specified (max. 4)"
					useage
					exit 1
				fi
				shift
				$DEBUG && echo "partition $NP type: $1"
				### set
				;;
			-b ) # define boot loader
				shift
				$DEBUG && echo "bootloader $1"
				case "$1" in
					none ) P="$1";;
					http://*/* | https://*/* ) P="$1";;
					* ) P="http://download.goldelico.com/gta04/$1/u-boot.bin" ;;
				esac
				$DEBUG && echo "u-boot: $P"
				### set
				;;
			-k ) # define kernel
				shift
				$DEBUG && echo "kernel $1"
				case "$1" in
					none ) P="$1";;
					http://*/* | https://*/* ) P="$1";;
					* ) P="http://download.goldelico.com/gta04/$1/uImage" ;;
				esac
				$DEBUG && echo "kernel: $P"
				### set
				;;
			-m ) # define modules
				shift
				$DEBUG && echo "modules $1"
				case "$1" in
					none ) P="$1";;
					http://*/* | https://*/* ) P="$1";;
					* ) P="http://download.goldelico.com/gta04/$1/modules.tgz" ;;
				esac
				$DEBUG && echo "modules: $P"
				### set
				;;
			-d ) # define device trees
				shift
				$DEBUG && echo "device trees $1"
				case "$1" in
					none ) P="$1";;
					all ) P="omap3-gta04a2.dtb omap3-gta04a3.dtb omap3-gta04a4.dtb omap3-gta04a5.dtb" ;;
					* ) P="$1";;
				esac
				$DEBUG && echo "device trees: $P"
				### set
				;;
			-r ) # define root file system
				shift
				$DEBUG && echo "rootfs $1"
				case "$1" in
					none ) P="$1";;
					http://*/* | https://*/* ) P="$1";;
					*-debian ) P="http://download.goldelico.com/gta04/debian/$1.tbz" ;;
					*-lxde ) P="http://download.goldelico.com/gta04/debian/$1.tbz" ;;
					*-qtmoko ) P="http://download.goldelico.com/gta04/qtmoko/$1.tbz" ;;
					*-quantumstep ) P="http://download.goldelico.com/gta04/qtmoko/$1.tbz" ;;
					*-replicant-*) P="http://download.goldelico.com/gta04/replicant/$1/latest-replicant.tbz" ;;
					* ) echo "unknown rootfs: $1"; useage; exit 1 ;;
				esac
				$DEBUG && echo "rootfs: $P"
				### set
				;;
			-c ) # define config
				shift
				$DEBUG && echo "config $1"
				case "$1" in
					none ) P="$1";;
					http://*/* | https://*/* ) P="$1";;
					* ) P="http://download.goldelico.com/gta04/$1/config.tgz" ;;
				esac
				$DEBUG && echo "config: $P"
				### set
				;;
			debian-lxde )	process -f ext4 -r latest-lxde -d latest -k latest -m latest -c debian-wheezy ;;
			qtmoko )	process -f ext4 -r latest-qtmoko -d all -k latest ;;
			replicant )	process -f ext4 -r latest-replicant-4.2 ;;
			quantumstep )	process -f ext4 -r latest-quantumstep -d all -k latest -m latest -c debian-wheezy ;;
			l2804 )		process -f fat -b latest debian-lxde ;;
			l3704 )		process -f fat -b latest/b2 debian-lxde ;;
			l7004 )		process -f fat -b latest/b3 debian-lxde ;;
			neo900 )	process -f fat -b latest/b7 debian-lxde ;;
			pandaboard )	process -f fat -b latest/panda-es debian-lxde ;;
			pyra )		process -f fat -b latest/pyra debian-lxde ;;
			all )		process debian-lxde qtmoko replicant quantumstep ;;
			-* )		echo "unknown option: $1"; useage; exit 1 ;;
			* )		echo "unknown macro: $1"; useage; exit 1 ;;
		esac
		shift
	done
}

[ "$DEV" ] || export DEV=/dev/sdc

case "$1" in
	"--debug" )
		DEBUG=true
		shift
		;;
esac

$DEBUG && echo "-- define defaults --"
process debian-lxde -f none -f none -f none

if [ "$1" ]
then
	$DEBUG && echo "-- start over with given options --"
	# start over with given options
	NP=0
	process "$@" || exit 1
fi

$DEBUG && echo "-- prepare --"

exit 1

DEVP=$DEV
[ -b "${DEV}p" ] && DEV=${DEV}p	# needs "p"artition suffix

if [ "${DEV}" = "/dev/sda" ]
then
	echo "can't overwrite /dev/sda"
	exit 1
elif [ -b "$DEV" ]
then
	: ok
else
	echo "not a block device: $DEV"
	exit 1
fi

$DEBUG && echo "-- unmount partitions --"

for P in 1 2 3 4
	do
		umount ${DEVP}${P}
		mkdir -p /media/P${P}
	done

$DEBUG && echo "-- clear boot record --"

## based on: http://omappedia.org/wiki/SD_Configuration#Script_to_partition.2Fformat_SDCards
## and: http://www.sakoman.com/OMAP/a-script-for-partitioningformatting-a-bootable-sdmicrosd-card.html

dd if=/dev/zero of=$DEV bs=1024 count=1024	# clear boot records

$DEBUG && echo "-- partitioning --"
[ "$SIZE" ] || SIZE=$(LC_ALL=C LANGUAGE=C fdisk -c -l $DEV | grep Disk | awk '{print $5}')	# make sure fdisk runs in default LANGUAGE
echo DISK SIZE: $SIZE bytes
CYLINDERS=$(expr $SIZE / 255 / 63 / 512)
echo CYLINDERS: $CYLINDERS
SECTORS2=$(expr $SIZE / 512 - 131072)	# number of sectors for second partition
echo SECTORS1: 130944
echo SECTORS2: $SECTORS2
{
##	echo ,9,0x0C,*
##	echo ,,,-
	echo 128,130944,0x0C,*	# first partition: FAT
	echo 131072,$SECTORS2,,-	# second partiton: Linux
} | sfdisk --force -D -uS -H 255 -S 63 -C $CYLINDERS $DEV
/sbin/partprobe $DEV

$DEBUG && echo "-- format partitions --"

for P in 1 2 3 4
do # format partitions
	umount ${DEVP}${P}
	case "$FORMAT$P" in
		fat )
			mkfs.vfat -F 32 -n "boot" ${DEVP}${P} &&
			fsck.vfat -y ${DEVP}${P}
			mount ${DEVP}${P} /media/P${P} || exit
			;;
		ext* )
			mke2fs -j -L "rootfs" ${DEVP}${P} &&
			fsck.ext3 -y ${DEVP}${P}
			mount ${DEVP}${P} /media/P${P} || exit
			;;
	esac
df

$DEBUG && echo "-- install --"

for P in 1 2 3 4
do
	( cd /media/P{$P}

## install what was specified
## derive secondary names from $(dirname $DIR)/u-boot.flash etc.
## try .tbz and .tgz

# first partition (FAT)
wget "$BOOT/MLO"	# must come first
wget "$BOOT/x-load.flash"
## some x-loaders want u-boot.bin others want u-boot.img
wget "$BOOT/u-boot.bin"
wget "$BOOT/u-boot.flash"
wget "$BOOT/splash.rgb16z"
wget "$BOOT/menu.rgb16z"
wget "$BOOT/boot.scr"
## some u-boots want uImage.bin others want uImage.img
wget "$KERNEL/uImage"
wget "$KERNEL/bootargs.scr"

for i in $DTBS
do
	wget "$KERNEL/$i"
done
)
ls -l /media/P1

wget "$ROOTFS" -O - | tar xvjf -
# wipe out old configs coming from the tbz
rm -rf boot/*
rm -rf lib/modules/kernel
rm -rf root
wget "$KERNEL/modules.tgz" -O - | tar xvzf -
wget "$CONFIG/config.tgz" -O - | tar xvzf -
	)
	ls -l /media/P${P}
done

$DEBUG && echo "-- sync --"

sync

if [ "$DEV" ]
then
	$DEBUG && echo "-- show mounted partitions --"
	df
	$DEBUG && echo "-- unmount --"
	for P in 1 2 3 4
	do
		umount ${DEVP}${P}
		rmdir /media/P${P}
	done
	$DEBUG && echo "--fsck --"
	for P in 1 2 3 4
	do
		fsck -f ${DEVP}${P}
	done
fi

$DEBUG && echo "-- done --"
